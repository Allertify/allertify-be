pipeline {
    agent any
    
    environment {
        // Blok ini sekarang hanya berisi deklarasi statis yang sederhana
        NODE_VERSION = '20'
        DOCKER_IMAGE = 'allertify-be'
        DOCKER_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        // --- TAHAP BARU UNTUK INISIALISASI VARIABEL ---
        stage('Initialize Environment') {
            steps {
                script {
                    // Di dalam 'script' block, kita BEBAS menggunakan logika Groovy
                    env.DATABASE_URL = env.DATABASE_URL ?: 'postgresql://allertify:12345678@localhost:5437/allertify'
                    env.JWT_ACCESS_SECRET = env.JWT_ACCESS_SECRET ?: '4lL3rT1FFy_BE_ACC'
                    env.JWT_REFRESH_SECRET = env.JWT_REFRESH_SECRET ?: '4lL3rT1FFy_BE_RFR'
                    env.CLOUDINARY_CLOUD_NAME = env.CLOUDINARY_CLOUD_NAME ?: 'your-cloud-name'
                    env.CLOUDINARY_API_KEY = env.CLOUDINARY_API_KEY ?: 'your-api-key'
                    env.CLOUDINARY_API_SECRET = env.CLOUDINARY_API_SECRET ?: 'your-api-secret'
                    env.SMTP_USER = env.SMTP_USER ?: 'your-email@gmail.com'
                    env.SMTP_PASS = env.SMTP_PASS ?: 'your-app-password'
                    env.SMTP_FROM = env.SMTP_FROM ?: 'Allertify <your-email@gmail.com>'
                    env.GEMINI_API_KEY = env.GEMINI_API_KEY ?: 'your-gemini-api-key'
                    
                    // Muat kredensial SSH di sini juga
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'vps-key', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER_VAR'),
                        string(credentialsId: 'vps-host', variable: 'VPS_HOST_VAR')
                    ]) {
                        env.SSH_USER = SSH_USER_VAR
                        env.SSH_KEY = SSH_KEY_FILE
                        env.VPS_HOST = VPS_HOST_VAR
                    }
                    echo "‚úÖ Environment variables initialized."
                }
            }
        }

        stage('Clone Repository') {
            steps {
                checkout scm
                echo "Repository berhasil di-clone"
            }
        }

        stage('Show Commit Info') {
            steps {
                sh '''
                    echo "‚úÖ Commit yang sedang dideploy:"
                    git log -1 --pretty=format:"%h - %an: %s"
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing dependencies...'
                sh '''
                    npm ci
                    npx prisma generate
                '''
            }
        }

        stage('Build Application') {
            steps {
                echo 'üèóÔ∏è Building application...'
                sh '''
                    npm run build
                    ls -la dist/
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                script {
                    def image = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    
                    // Tidak perlu save dan archive jika Anda punya Docker Hub/Registry
                    // Jika tidak punya, baris di bawah ini sudah benar.
                    sh "docker save ${DOCKER_IMAGE}:${DOCKER_TAG} | gzip > ${DOCKER_IMAGE}-${DOCKER_TAG}.tar.gz"
                    archiveArtifacts artifacts: "${DOCKER_IMAGE}-${DOCKER_TAG}.tar.gz", fingerprint: true
                }
            }
        }

        stage('Generate Environment File for Deployment') {
            steps {
                // Generate .env file yang akan dikirim ke VPS
                sh '''
                    echo "# Auto-generated by Jenkins Build #${BUILD_NUMBER}" > .env
                    echo "DATABASE_URL=${DATABASE_URL}" >> .env
                    echo "JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}" >> .env
                    echo "JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}" >> .env
                    echo "CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}" >> .env
                    echo "CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}" >> .env
                    echo "CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}" >> .env
                    echo "SMTP_USER=${SMTP_USER}" >> .env
                    echo "SMTP_PASS=${SMTP_PASS}" >> .env
                    echo "SMTP_FROM=${SMTP_FROM}" >> .env
                    echo "GEMINI_API_KEY=${GEMINI_API_KEY}" >> .env
                    echo "NODE_ENV=production" >> .env
                    echo "PORT=3001" >> .env
                '''
            }
        }

        stage('Deploy to VPS') {
            steps {
                // Gunakan variabel yang sudah di-set di stage 'Initialize Environment'
                sh '''#!/bin/bash
                    echo "üöÄ Deploying to ${VPS_HOST}..."
                    rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${SSH_KEY}" --exclude 'node_modules' --exclude '.git' ./ "${SSH_USER}@${VPS_HOST}:~/allertify-be/"
                    
                    echo "üöÄ Running docker compose on VPS..."
                    ssh -o StrictHostKeyChecking=no -i "${SSH_KEY}" "${SSH_USER}@${VPS_HOST}" "cd ~/allertify-be && docker-compose down && docker-compose up -d --build"
                '''
            }
        }

        stage('Verify Deployment') {
            steps {
                sh '''#!/bin/bash
                    echo "üîé Verifying deployment on ${VPS_HOST}..."
                    ssh -o StrictHostKeyChecking=no -i "${SSH_KEY}" "${SSH_USER}@${VPS_HOST}" "docker ps"
                '''
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            // Membersihkan file-file sementara di workspace Jenkins
            deleteDir() 
        }
        success {
            echo "‚úÖ Deployment successful!"
        }
        failure {
            echo "‚ùå Deployment failed."
        }
    }
}