
services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: allertify-postgres
    environment:
      POSTGRES_DB: allertify
      POSTGRES_USER: allertify
      POSTGRES_PASSWORD: 12345678
      # Enable WAL archiving for point-in-time recovery
      POSTGRES_INITDB_ARGS: "--wal-level=replica --archive-mode=on --archive-command='test ! -f /var/lib/postgresql/backup/archive/%f && cp %p /var/lib/postgresql/backup/archive/%f'"
    ports:
      - "0.0.0.0:5437:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/var/lib/postgresql/backup
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U allertify"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c wal_level=replica
      -c archive_mode=on
      -c archive_command='test ! -f /var/lib/postgresql/backup/archive/%f && cp %p /var/lib/postgresql/backup/archive/%f'
      -c max_wal_senders=3
      -c wal_keep_size=1GB

  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: allertify-be
    env_file:
      - .env
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://allertify:12345678@postgres:5432/allertify
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      # Cloudinary Configuration
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
    ports:
      - "127.0.0.1:3109:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  postgres_backup: